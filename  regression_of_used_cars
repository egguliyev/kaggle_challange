{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":76728,"databundleVersionId":9057646,"sourceType":"competition"}],"dockerImageVersionId":30761,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-21T03:53:05.372322Z","iopub.execute_input":"2024-09-21T03:53:05.372737Z","iopub.status.idle":"2024-09-21T03:53:05.839795Z","shell.execute_reply.started":"2024-09-21T03:53:05.372695Z","shell.execute_reply":"2024-09-21T03:53:05.838271Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e9/sample_submission.csv\n/kaggle/input/playground-series-s4e9/train.csv\n/kaggle/input/playground-series-s4e9/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport re\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import GradientBoostingRegressor\n\n# Load the datasets\ntrain_file_path = '/kaggle/input/playground-series-s4e9/train.csv'\ntest_file_path = '/kaggle/input/playground-series-s4e9/test.csv'\ntrain_df = pd.read_csv(train_file_path)\ntest_df = pd.read_csv(test_file_path)\n\n# Feature engineering: Extract horsepower, engine size, and cylinders from 'engine' column\ndef extract_engine_features(engine_string):\n    horsepower_match = re.search(r'(\\d+\\.?\\d*)HP', engine_string)\n    horsepower = float(horsepower_match.group(1)) if horsepower_match else None\n\n    engine_size_match = re.search(r'(\\d+\\.?\\d*)L', engine_string)\n    engine_size = float(engine_size_match.group(1)) if engine_size_match else None\n\n    cylinder_match = re.search(r'(\\d+) Cylinder', engine_string)\n    cylinders = int(cylinder_match.group(1)) if cylinder_match else None\n\n    return horsepower, engine_size, cylinders\n\n# Apply feature extraction to both train and test datasets\ntrain_df[['horsepower', 'engine_size', 'cylinders']] = train_df['engine'].apply(lambda x: pd.Series(extract_engine_features(x)))\ntest_df[['horsepower', 'engine_size', 'cylinders']] = test_df['engine'].apply(lambda x: pd.Series(extract_engine_features(x)))\n\n# Fill missing values with median\ntrain_df['horsepower'].fillna(train_df['horsepower'].median(), inplace=True)\ntrain_df['engine_size'].fillna(train_df['engine_size'].median(), inplace=True)\ntrain_df['cylinders'].fillna(train_df['cylinders'].median(), inplace=True)\n\ntest_df['horsepower'].fillna(test_df['horsepower'].median(), inplace=True)\ntest_df['engine_size'].fillna(test_df['engine_size'].median(), inplace=True)\ntest_df['cylinders'].fillna(test_df['cylinders'].median(), inplace=True)\n\n# Label encoding for categorical columns\nlabel_encoders = {}\nfor feature in ['brand', 'fuel_type']:\n    label_encoders[feature] = LabelEncoder()\n    train_df[feature] = label_encoders[feature].fit_transform(train_df[feature])\n    test_df[feature] = label_encoders[feature].transform(test_df[feature])\n\n# Define the Gradient Boosting Regressor model\ngbr_model = GradientBoostingRegressor(random_state=42)\n\n# Select essential features for model training\nessential_features = ['brand', 'model_year', 'milage', 'fuel_type', 'horsepower', 'engine_size', 'cylinders']\nX_train = train_df[essential_features]\ny_train = train_df['price']\n\n# Train the model\ngbr_model.fit(X_train, y_train)\n\n# Make predictions on the test dataset\nX_test = test_df[essential_features]\ntest_predictions_gbr = gbr_model.predict(X_test)\n\n# Prepare the submission file\nsubmission_df_gbr = pd.DataFrame({\n    'id': test_df['id'],\n    'price': test_predictions_gbr\n})\n\n# Save the submission file\nsubmission_file_path = '/kaggle/working/submission.csv'\nsubmission_df_gbr.to_csv(submission_file_path, index=False)\n\n ","metadata":{},"execution_count":null,"outputs":[]}]}